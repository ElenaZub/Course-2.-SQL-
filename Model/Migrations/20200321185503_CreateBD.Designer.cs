// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(ModelDBContext))]
    [Migration("20200321185503_CreateBD")]
    partial class CreateBD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Entity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Audi"
                        });
                });

            modelBuilder.Entity("Model.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bicycle"
                        });
                });

            modelBuilder.Entity("Model.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Kharkiv",
                            Email = "ivan@i.van",
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            Phone = "0987654",
                            State = "UK",
                            Street = "23 Seprnya",
                            ZipCode = "8976"
                        },
                        new
                        {
                            Id = 2,
                            City = "Kharkiv",
                            Email = "pet@r.ov",
                            FirstName = "Petr",
                            LastName = "Petrov",
                            Phone = "0987654",
                            State = "UK",
                            Street = "23 Seprnya",
                            ZipCode = "8976"
                        });
                });

            modelBuilder.Entity("Model.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("order_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnName("required_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnName("shipped_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnName("order_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 194, DateTimeKind.Local).AddTicks(5159),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 196, DateTimeKind.Local).AddTicks(8206),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 196, DateTimeKind.Local).AddTicks(8779),
                            StaffId = 1,
                            Status = "Wait delivery",
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(876),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(898),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(910),
                            StaffId = 2,
                            Status = "Delivered",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 1,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(946),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(949),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(952),
                            StaffId = 2,
                            Status = "In processing",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(956),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(958),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(961),
                            StaffId = 1,
                            Status = "In processing",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 1,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(965),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(967),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(970),
                            StaffId = 2,
                            Status = "Delivered",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 6,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(973),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(976),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(978),
                            StaffId = 2,
                            Status = "In processing",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 7,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(981),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(984),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(987),
                            StaffId = 2,
                            Status = "done",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 8,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(990),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(993),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(996),
                            StaffId = 2,
                            Status = "done",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 9,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(999),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(1001),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(1004),
                            StaffId = 1,
                            Status = "Wait delivery",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 10,
                            CustomerId = 2,
                            Date = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(1007),
                            RequiredDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(1009),
                            ShippedDate = new DateTime(2020, 3, 21, 20, 55, 3, 197, DateTimeKind.Local).AddTicks(1012),
                            StaffId = 2,
                            Status = "Wait delivery",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("Model.Entity.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Discount = 120m,
                            ListPrice = 20m,
                            Quantity = 5
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Discount = 3m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 2,
                            Discount = 3m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 1,
                            Discount = 3m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 5,
                            ProductId = 2,
                            Discount = 39m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 6,
                            ProductId = 1,
                            Discount = 3m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 7,
                            ProductId = 2,
                            Discount = 31m,
                            ListPrice = 27m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 8,
                            ProductId = 2,
                            Discount = 32m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 9,
                            ProductId = 2,
                            Discount = 17m,
                            ListPrice = 30m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 10,
                            ProductId = 2,
                            Discount = 10m,
                            ListPrice = 30m,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("Model.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ModelYear")
                        .HasColumnName("model_year")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 2,
                            CategoryId = 1,
                            ListPrice = 20m,
                            ModelYear = 2015,
                            Name = "TT"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 2,
                            ListPrice = 20m,
                            ModelYear = 2020,
                            Name = "GS750"
                        });
                });

            modelBuilder.Entity("Model.Entity.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("staffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Email = "e.zub",
                            FirstName = "Elena",
                            LastName = "Zub",
                            Phone = "0987577586245",
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            Email = "e.reshetilo",
                            FirstName = "Oleg",
                            LastName = "Reshetilo",
                            Phone = "7756996595",
                            StoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            Email = "e.borisov",
                            FirstName = "Boris",
                            LastName = "Borisov",
                            Phone = "098756344245",
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("Model.Entity.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ProductId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 2,
                            Quantity = 12
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 1,
                            Quantity = 14
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 2,
                            Quantity = 7
                        });
                });

            modelBuilder.Entity("Model.Entity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("store_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Kharkiv",
                            Email = "klass.com",
                            Name = "Klass",
                            Phone = "0987654",
                            State = "UK",
                            Street = "23 Seprnya",
                            ZipCode = "8976"
                        },
                        new
                        {
                            Id = 2,
                            City = "Kharkiv",
                            Email = "rost.com",
                            Name = "Rost",
                            Phone = "0578u56767",
                            State = "UK",
                            Street = "23 Seprnya",
                            ZipCode = "0986"
                        });
                });

            modelBuilder.Entity("Model.Entity.Order", b =>
                {
                    b.HasOne("Model.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.OrderItem", b =>
                {
                    b.HasOne("Model.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Product", b =>
                {
                    b.HasOne("Model.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Staff", b =>
                {
                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Stock", b =>
                {
                    b.HasOne("Model.Entity.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
